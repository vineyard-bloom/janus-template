"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const json_schema_to_typescript_formatter_1 = require("./json-schema-to-typescript-formatter");
function writeTsTypeDefinitions(targetFile, endpointTypeDefs) {
    return __awaiter(this, void 0, void 0, function* () {
        yield writeTsDefinitionsPrefix(targetFile);
        for (let i in endpointTypeDefs) {
            yield writeTsRequestResponseDefinition(targetFile, endpointTypeDefs[i]);
        }
    });
}
exports.writeTsTypeDefinitions = writeTsTypeDefinitions;
function writeTsDefinitionsPrefix(targetFile) {
    return __awaiter(this, void 0, void 0, function* () {
        yield fs.writeFileSync(targetFile, "import { Request } from 'vineyard-lawn'\n\n");
        yield fs.appendFileSync(targetFile, json_schema_to_typescript_formatter_1.jsonSchema2TsAutoGeneratedText);
    });
}
function writeTsRequestResponseDefinition(targetFile, tsDefinition) {
    return __awaiter(this, void 0, void 0, function* () {
        const { requestTsDef, responseTsDef, title } = tsDefinition;
        yield fs.appendFileSync(targetFile, "\n\n/************************ -- " + title + " -- *****************************/");
        yield fs.appendFileSync(targetFile, requestTsDef);
        yield fs.appendFileSync(targetFile, responseTsDef);
    });
}
//# sourceMappingURL=typescript-type-writer.js.map