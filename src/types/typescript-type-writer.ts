import { EndpointDefinition } from "../endpoint-schema-parsing"
import { jsonSchema2TsAutoGeneratedText, parseJson2Ts } from "./json-schema-to-typescript-formatter"
import { replaceAll } from "../file-formatting-writing-helpers"
import * as fs from 'fs'


export class TypescriptTypeWriter {
  private static readonly prefix: string = "import { Request } from 'vineyard-lawn'\n\n" + jsonSchema2TsAutoGeneratedText

  private readonly typesFile: string

  constructor(typesFile: string){
    this.typesFile = typesFile
  }

  async writeFile(endpointDefinitions: EndpointDefinition[]): Promise<void> {
    await fs.writeFileSync(this.typesFile, TypescriptTypeWriter.prefix)

    const typeDefs = await typeDefinitions(endpointDefinitions)
    await Promise.all(typeDefs.map( async def => {
      await fs.appendFileSync(this.typesFile, formatDefinitionForWriting(def))
    }))
  }
}

function formatDefinitionForWriting(typeDefinition: EndpointTypeDef): string {
  const { requestTsDef, responseTsDef, title} = typeDefinition
  return "\n\n/************************ -- "+ title + " -- *****************************/\n" +
    requestTsDef + "\n" +
    responseTsDef
}

export type EndpointTypeDef = {requestTsDef: string, responseTsDef: string, title: string}
async function typeDefinitions(endpointDefinitions: EndpointDefinition[]): Promise<EndpointTypeDef[]> {
  return await Promise.all(endpointDefinitions.map(async endpointDef => {
    const {request, requestTypeName, response, responseTypeName, title} = endpointDef
    return {
      requestTsDef: await parseJson2Ts(request, requestTypeName, "Request", "data").then(def => replaceAll(def, ";")),
      responseTsDef: await parseJson2Ts(response, responseTypeName).then(def => replaceAll(def, ";")),
      title: title
    }
  }))
}